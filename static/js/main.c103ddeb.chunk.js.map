{"version":3,"sources":["components/Navbar/Navbar.module.css","redux/auth-reducer.ts","reportWebVitals.ts","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","redux/app-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","App.tsx","index.tsx","components/common/Preloader/Preloader.tsx","components/Header/Header.module.css","components/common/CustomButton/CustomButton.module.css","components/common/CustomButton/CustomButton.tsx","redux/profile-reducer.ts","api/api.ts","redux/dialog-reducer.ts","utils/objec-helpers.ts","redux/users-reducer.ts"],"names":["module","exports","SET_AUTH_USER_DATA","SET_FETCHING","SET_USER_AUTHORIZATION","SET_CAPTCHA_URL","initialState","data","isFetching","isAuth","captcha","setAuthUserData","type","setFetching","setCaptchaURL","getAuthUserData","dispatch","a","authAPI","me","response","resultCode","login","email","password","rememberMe","getCaptcha","stopSubmit","_error","messages","logout","securityAPI","getCaptchaURL","captchaURL","url","authReducer","state","action","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Navbar","className","s","nav","item","to","active","activeClassName","activeLink","News","Header","props","header","src","alt","loginBlock","CustomButton","purple","onClick","style","textDecoration","HeaderContainer","this","React","Component","connect","auth","INITIALIZED_SUCCESS","initialized","appReducer","rootReducer","combineReducers","profilePage","profileReducer","dialogPage","dialogReducer","usersPage","usersReducer","app","form","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","withSuspense","Suspense","fallback","Preloader","DialogsContainer","lazy","ProfileContainer","UsersContainer","Login","App","initializeApp","borderRadius","path","render","component","AppContainer","withRouter","promise","Promise","all","SamuraiJSApp","ReactDOM","document","getElementById","width","height","position","top","left","zIndex","restProps","finalClassName","default","ADD_NEW_POST","DELETE_POST","SET_USER_PROFILE","SET_STATUS","SAVE_PHOTO_SUCCESS","SAVE_PROFILE_SUCCESS","posts","id","text","likesCount","userProfile","status","addPost","postText","setStatus","getUserProfile","userId","usersAPI","getProfile","Number","getStatus","profileAPI","updateStatus","savePhoto","photo","photos","saveProfile","profile","getState","reject","filter","p","postId","fullName","profileData","instance","axios","create","withCredentials","baseURL","headers","getUsers","currentPage","pageSize","get","unfollow","delete","follow","post","console","warn","put","photoFile","formData","FormData","append","ADD_NEW_MESSAGE","addMessageAC","message","dialogs","name","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","SET_FOLLOWING_IN_PROGRESS","users","totalUsersCount","followingInProgress","followSuccess","unfollowSuccess","setCurrentPage","setFollowingInProgress","requestUsers","page","totalCount","followUnfollowFlow","apiMethod","actionCreator","bind","followed"],"mappings":"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","file":"static/js/main.c103ddeb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__Nj7EO\",\"item\":\"Navbar_item__3JUD_\"};","import {Dispatch} from \"redux\";\r\nimport {authAPI, securityAPI} from \"../api/api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {StoreType} from \"./redux-store\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_AUTH_USER_DATA = 'auth/SET-AUTH-USER-DATA'\r\nconst SET_FETCHING = 'auth/SET-FETCHING'\r\nconst SET_USER_AUTHORIZATION = 'auth/SET-USER-AUTHORIZATION'\r\nconst SET_CAPTCHA_URL = 'auth/SET-CAPTCHA-URL'\r\n\r\n\r\nexport type UserDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\nexport type AuthUserDataType = {\r\n    data: UserDataType | null\r\n    isFetching: boolean\r\n    isAuth: boolean\r\n    captcha: string | null\r\n}\r\n\r\ntype ActionsTypes = ReturnType<typeof setAuthUserData>\r\n    | ReturnType<typeof setFetching>\r\n    | ReturnType<typeof setUserAuthorization>\r\n    | ReturnType<typeof setCaptchaURL>\r\n\r\ntype StopSubmitType = ReturnType<typeof stopSubmit>\r\n\r\nlet initialState: AuthUserDataType = {\r\n    data: null,\r\n    isFetching: true,\r\n    isAuth: false,\r\n    captcha: null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionsTypes): AuthUserDataType => {\r\n    switch (action.type) {\r\n        case SET_AUTH_USER_DATA:\r\n            return {\r\n                ...state,\r\n                data: action.data,\r\n                isAuth: true\r\n            }\r\n        case SET_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case SET_USER_AUTHORIZATION:\r\n            return {\r\n                ...state,\r\n                isAuth: action.isAuth\r\n            }\r\n        case SET_CAPTCHA_URL:\r\n            return {\r\n                ...state,\r\n                captcha: action.captcha\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (data: UserDataType | null) => ({type: SET_AUTH_USER_DATA, data} as const)\r\nexport const setFetching = (isFetching: boolean) => ({type: SET_FETCHING, isFetching} as const)\r\nexport const setUserAuthorization = (isAuth: boolean) => ({type: SET_USER_AUTHORIZATION, isAuth} as const)\r\nexport const setCaptchaURL = (captcha: string | null) => ({type: SET_CAPTCHA_URL, captcha} as const)\r\n\r\n\r\nexport const getAuthUserData = () => async (dispatch: Dispatch) => {\r\n    const response = await authAPI.me()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(response.data.data))\r\n    }\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string | null): ThunkType => async (dispatch) => {\r\n    const data = await authAPI.login(email, password, rememberMe, captcha)\r\n    if (data.resultCode === 0) {\r\n        await dispatch(getAuthUserData())\r\n        dispatch(setCaptchaURL(null))\r\n    } else {\r\n        if (data.resultCode === 10) {\r\n            dispatch(getCaptcha())\r\n        }\r\n        dispatch(stopSubmit('login', {_error: data.messages}))\r\n    }\r\n}\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    const data = await authAPI.logout()\r\n    if (data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null))\r\n    }\r\n    dispatch(setUserAuthorization(false))\r\n}\r\nexport const getCaptcha = (): ThunkType => async (dispatch) => {\r\n    const captchaURL = await securityAPI.getCaptchaURL()\r\n    dispatch(setCaptchaURL(captchaURL.url))\r\n}\r\n\r\nexport type ThunkType = ThunkAction<void, StoreType, unknown, CommonActionType>\r\ntype CommonActionType = ActionsTypes | StopSubmitType\r\n\r\nexport default authReducer","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" >Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/dialogs\" >Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" >Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" >News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a>Music</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a>Settings</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/friends\" activeClassName={s.activeLink}><h2>Friends</h2></NavLink>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nfunction News() {\r\n    return (\r\n        <div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default News;","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './Header.module.css';\r\nimport {UserDataType} from \"../../redux/auth-reducer\";\r\nimport CustomButton from \"../common/CustomButton/CustomButton\";\r\n\r\ntype HeaderPropsType = {\r\n    data: UserDataType | null\r\n    isAuth: boolean\r\n    logout: () => void\r\n}\r\n\r\nfunction Header(props: HeaderPropsType) {\r\n    return (\r\n        <header className={s.header}>\r\n            <img\r\n                src=\"https://static.tildacdn.com/tild3136-3538-4632-b463-653639356631/Dvh-1.gif\"\r\n                alt=\"\"/>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth\r\n                    ? <div>Hi, {props.data?.login} | <CustomButton purple onClick={props.logout}>Logout</CustomButton></div>\r\n                    : <NavLink style={{textDecoration: \"none\"}} to='/login'>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {logout, setFetching, UserDataType} from \"../../redux/auth-reducer\";\r\nimport {connect} from 'react-redux';\r\nimport {StoreType} from \"../../redux/redux-store\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    data: UserDataType | null\r\n    isFetching: boolean\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    setFetching: (isFetching: boolean) => void\r\n    logout: () => void\r\n}\r\ntype HeaderContainerPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerPropsType> {\r\n\r\n\r\n    render() {\r\n        return <Header data={this.props.data} isAuth={this.props.isAuth} logout={this.props.logout}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: StoreType) => {\r\n    return {\r\n        data: state.auth.data,\r\n        isFetching: state.auth.isFetching,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    setFetching,\r\n    logout\r\n})(HeaderContainer);","import {ThunkAction} from \"redux-thunk\";\r\nimport {StoreType} from \"./redux-store\";\r\nimport {getAuthUserData} from \"./auth-reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED-SUCCESS'\r\n\r\ntype ActionsTypes = ReturnType<typeof initializedSuccess>\r\n\r\ntype InitialStateType = {\r\n    initialized: boolean\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    initialized: false\r\n}\r\n\r\nconst appReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializedSuccess = () => {\r\n  return {\r\n      type: INITIALIZED_SUCCESS\r\n  } as const\r\n}\r\n\r\nexport const initializeApp = (): ThunkType => (dispatch) => {\r\n    let promise = dispatch(getAuthUserData())\r\n    Promise.all([promise]).then(()=>{\r\n        dispatch(initializedSuccess())\r\n    })\r\n}\r\n\r\n\r\ntype ThunkType = ThunkAction<void, StoreType, unknown, CommonActionType>\r\ntype CommonActionType = ActionsTypes\r\n\r\nexport default appReducer","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk'\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogReducer from \"./dialog-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport appReducer from \"./app-reducer\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogPage: dialogReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer\r\n})\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport let store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\nexport type StoreType = ReturnType<typeof rootReducer>\r\n\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React, {ComponentType} from 'react';\r\nimport {Preloader} from \"../components/common/Preloader/Preloader\";\r\n\r\nexport function withSuspense<T>(Component: ComponentType<T>) {\r\n    return (props: any) => (\r\n        <React.Suspense fallback={<Preloader/>}>\r\n            <Component {...props}/>\r\n        </React.Suspense>\r\n    )\r\n};\r\n\r\n","import React, { Suspense } from 'react';\nimport './App.css'\nimport Navbar from \"./components/Navbar/Navbar\";\nimport News from \"./components/News/News\";\nimport {HashRouter, Route, RouteComponentProps, withRouter} from 'react-router-dom';\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport {connect, Provider} from \"react-redux\";\nimport {initializeApp} from \"./redux/app-reducer\";\nimport {store, StoreType} from \"./redux/redux-store\";\nimport {Preloader} from \"./components/common/Preloader/Preloader\";\nimport {withSuspense} from \"./hoc/withSuspense\";\nconst DialogsContainer = React.lazy(()=> import('./components/Dialogs/DialogsContainer'));\nconst ProfileContainer = React.lazy(()=> import('./components/Profile/ProfileContainer'));\nconst UsersContainer = React.lazy(()=> import('./components/Users/UsersContainer'));\nconst Login = React.lazy(()=> import('./components/Login/Login'));\n\n\ntype MapStateToPropsType = {\n    initialized: boolean\n}\ntype MapDispatchToPropsType = {\n    initializeApp: () => void\n}\n\ntype AppPropsType = MapStateToPropsType & MapDispatchToPropsType\n\nclass App extends React.Component<AppPropsType> {\n    componentDidMount() {\n        this.props.initializeApp()\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n            <div style={{borderRadius: '10px'}} className='app-wrapper'>\n                <HeaderContainer/>\n                <Navbar/>\n                <div className='app-wrapper-content'>\n\n                    <Route path='/dialogs' render={withSuspense(DialogsContainer)}\n                    />\n                    <Route path='/profile/:userId?'\n                           render={() => <Suspense fallback={<Preloader/>}><ProfileContainer/></Suspense>}\n                    />\n                    <Route path='/news' component={() => <News/>}/>\n                    <Route path='/users' component={withSuspense(UsersContainer)}/>\n                    <Route path='/login' component={withSuspense(Login)}/>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nconst mapStateToProps = (state: StoreType): MapStateToPropsType => ({\n    initialized: state.app.initialized\n})\n\nlet AppContainer = withRouter<RouteComponentProps, any>(connect(mapStateToProps, {initializeApp})(App));\n\nconst SamuraiJSApp = () => {\n    return (\n        <HashRouter>\n            <Provider store={store}>\n                <AppContainer/>\n            </Provider>\n        </HashRouter>\n    )\n}\n\nexport default SamuraiJSApp","import React from 'react';\nimport reportWebVitals from './reportWebVitals';\nimport ReactDOM from \"react-dom\";\nimport SamuraiJSApp from \"./App\";\n\n\nReactDOM.render(<SamuraiJSApp/>, document.getElementById('root'))\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React from \"react\";\r\n\r\nexport const Preloader = () => {\r\n  return (\r\n      <div style={{width: \"100px\", height: \"100px\", position:\"absolute\",top: \"50%\", left: \"50%\", zIndex :1}}>\r\n          <img style={{width: '100px'}} src='https://i.gifer.com/XVo6.gif' alt=\"\"/>\r\n      </div>\r\n  )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1DYAZ\",\"loginBlock\":\"Header_loginBlock__c7CbQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"CustomButton_default__1Ox7Q\",\"purple\":\"CustomButton_purple__1Odhr\"};","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react';\r\nimport s from './CustomButton.module.css'\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype CustomButtonPropsType = DefaultButtonPropsType & {\r\n    purple?: boolean\r\n}\r\nconst CustomButton = ({\r\n                          className,\r\n                          purple,\r\n                          ...restProps\r\n                      }: CustomButtonPropsType) => {\r\n\r\n    const finalClassName = `${purple ? s.purple : s.default} ${className}`\r\n    return (\r\n        <button className={finalClassName} {...restProps}/>\r\n    );\r\n};\r\n\r\nexport default CustomButton;","import {Dispatch} from \"redux\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\nimport {StoreType} from \"./redux-store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {FormAction} from \"redux-form/lib/actions\";\r\n\r\nconst ADD_NEW_POST = 'profile/ADD-NEW-POST'\r\nconst DELETE_POST = 'profile/DELETE-POST'\r\nconst SET_USER_PROFILE = 'profile/SET-USER-PROFILE'\r\nconst SET_STATUS = 'profile/SET-STATUS'\r\nconst SAVE_PHOTO_SUCCESS = 'profile/SAVE-PHOTO-SUCCESS'\r\nconst SAVE_PROFILE_SUCCESS = 'profile/SAVE-PROFILE-SUCCESS'\r\n\r\n\r\nexport type UserProfilePhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport type KeysType = 'github' | 'vk' | 'facebook' | 'instagram' | 'twitter' | 'website' | 'youtube' | 'mainLink'\r\n\r\nexport type UserProfileContactsType = {\r\n    [key: string]: string\r\n}\r\nexport type UserProfileType = {\r\n    userId: number\r\n    aboutMe: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: UserProfileContactsType\r\n    photos: UserProfilePhotosType\r\n}\r\nexport type PostType = {\r\n    id: number\r\n    text: string\r\n    likesCount: number\r\n}\r\nexport type ProfilePageType = {\r\n    posts: Array<PostType>\r\n    userProfile: UserProfileType | null\r\n    status: string\r\n}\r\ntype ActionsTypes = ReturnType<typeof addPost>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setStatus>\r\n    | ReturnType<typeof deletePost>\r\n    | ReturnType<typeof savePhotoSuccess>\r\n    | ReturnType<typeof saveProfileSuccess>\r\n\r\nlet initialState: ProfilePageType = {\r\n    posts: [\r\n        {id: 1, text: 'Hi, how old are you?', likesCount: 10},\r\n        {id: 2, text: 'It\\'s my first post', likesCount: 15},\r\n        {id: 3, text: 'How is your it-kamasutra?', likesCount: 20}\r\n    ],\r\n    userProfile: null,\r\n    status: ''\r\n}\r\n\r\nconst profileReducer = (state = initialState, action: ActionsTypes): ProfilePageType => {\r\n    switch (action.type) {\r\n        case ADD_NEW_POST:\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, {id: 5, text: action.postText, likesCount: 0}]\r\n            }\r\n        case DELETE_POST:\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id !== action.postId)\r\n            }\r\n        case SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                userProfile: action.userProfile\r\n            }\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case SAVE_PHOTO_SUCCESS:\r\n            return {\r\n                ...state,\r\n                //@ts-ignore\r\n                userProfile: {...state.userProfile, photos: action.photos}\r\n            }\r\n        case SAVE_PROFILE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                //@ts-ignore\r\n                userProfile: {...state.userProfile, fullName: action.profileData.fullName }\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPost = (postText: string) => {\r\n    return {\r\n        type: ADD_NEW_POST,\r\n        postText\r\n    } as const\r\n}\r\nexport const deletePost = (postId: number) => {\r\n    return {\r\n        type: DELETE_POST,\r\n        postId\r\n    } as const\r\n}\r\nexport const setUserProfile = (userProfile: UserProfileType) => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        userProfile\r\n    } as const\r\n}\r\nexport const setStatus = (status: string) => {\r\n    return {\r\n        type: SET_STATUS,\r\n        status\r\n    } as const\r\n}\r\nexport const savePhotoSuccess = (photos: any) => ({type: SAVE_PHOTO_SUCCESS, photos} as const)\r\nexport const saveProfileSuccess = (profileData: any) => ({type: SAVE_PROFILE_SUCCESS, profileData} as const)\r\n\r\n\r\n\r\n\r\nexport const getUserProfile = (userId: number) => async (dispatch: Dispatch) => {\r\n    let data = await usersAPI.getProfile(Number(userId))\r\n    dispatch(setUserProfile(data))\r\n}\r\nexport const getStatus = (userId: number) => async (dispatch: Dispatch) => {\r\n    let data = await profileAPI.getStatus(userId)\r\n    dispatch(setStatus(data))\r\n}\r\nexport const updateStatus = (status: string) => async (dispatch: Dispatch) => {\r\n    let data = await profileAPI.updateStatus(status)\r\n    if (data.resultCode === 0) {\r\n        dispatch(setStatus(status))\r\n    }\r\n}\r\nexport const savePhoto = (photo: any) => async (dispatch: Dispatch) => {\r\n    let data = await profileAPI.savePhoto(photo)\r\n    if (data.resultCode === 0) {\r\n        dispatch(savePhotoSuccess(data.data.photos))\r\n    }\r\n}\r\nexport const saveProfile = (profile: any):ThunkType => async (dispatch, getState: () => StoreType) => {\r\n    const userId = getState().auth.data?.id\r\n\r\n    let data = await profileAPI.saveProfile(profile)\r\n    if (data.resultCode === 0 && userId) {\r\n        dispatch(getUserProfile(userId))\r\n    }else {\r\n        //@ts-ignore\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0]}))\r\n        return Promise.reject(data.messages[0])\r\n    }\r\n}\r\ntype ThunkType = ThunkAction<void, StoreType, unknown, ActionsTypes>\r\n/*type CommonActions = ActionsTypes & FormAction*/\r\nexport default profileReducer","import * as axios from \"axios\";\r\nimport {UserType} from \"../redux/users-reducer\";\r\nimport {UserProfileType} from \"../redux/profile-reducer\";\r\n\r\n\r\ntype GetUsersResponseType = {\r\n    items: UserType[]\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport type ResponseType<D> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: D\r\n}\r\n\r\n\r\ntype ProfileResponseType = UserProfileType\r\n\r\nconst instance = axios.default.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"8c6b7133-ade3-4a94-80d1-5d19fef414f3\"\r\n    }\r\n})\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 20) {\r\n        return instance.get<GetUsersResponseType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete<ResponseType<{}>>(`follow/${userId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<ResponseType<{}>>(`follow/${userId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    getProfile(userId: number) {\r\n        console.warn('Obsolete method. Please profileAPI object.')\r\n        return profileAPI.getProfile(userId)\r\n    }\r\n}\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileResponseType>(`profile/${userId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get(`profile/status/${userId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<ResponseType<{}>>(`profile/status/`, {status})\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    savePhoto(photoFile: any) {\r\n        const formData = new FormData()\r\n        formData.append(\"image\", photoFile)\r\n        return instance.put<ResponseType<ProfileResponseType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type':'multipart/form-data'\r\n            }\r\n        })\r\n            .then(response => response.data)\r\n    },\r\n    saveProfile(profile: any) {\r\n        return instance.put<ResponseType<ProfileResponseType>>(`profile`, profile)\r\n            .then(response => response.data)\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean, captcha: string | null = null) {\r\n        return instance.post<ResponseType<{}>>(`auth/login`, {email, password, rememberMe, captcha})\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{}>>(`auth/login`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    }\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaURL(){\r\n        return instance.get(`security/get-captcha-url`)\r\n            .then(response=> response.data)\r\n    }\r\n}","const ADD_NEW_MESSAGE = 'ADD-NEW-MESSAGE'\r\n\r\nexport const addMessageAC = (message: string) => {\r\n    return {\r\n        type: ADD_NEW_MESSAGE,\r\n        message\r\n    } as const\r\n}\r\n\r\n\r\nexport type IMessageType = {\r\n    id: number\r\n    text: string\r\n}\r\nexport type IDialogType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type IDialogPageType = {\r\n    dialogs: Array<IDialogType>\r\n    messages: Array<IMessageType>\r\n}\r\ntype ActionsTypes = ReturnType<typeof addMessageAC>\r\n\r\nlet initialState: IDialogPageType = {\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych'},\r\n        {id: 2, name: 'Yura'},\r\n        {id: 3, name: 'Sveta'},\r\n        {id: 4, name: 'Sasha'}\r\n    ],\r\n    messages: [\r\n        {id: 1, text: 'Hi'},\r\n        {id: 2, text: 'How are you?'},\r\n        {id: 3, text: 'How is your it-kamasutra?'}\r\n    ]\r\n}\r\n\r\nconst dialogReducer = (state = initialState, action: ActionsTypes): IDialogPageType => {\r\n    switch (action.type) {\r\n        case ADD_NEW_MESSAGE:\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, text: action.message}],\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default dialogReducer","export const updateObjectInArray = <A, I, N>(items: Array<A>, itemId: I, objPropName: string, newObjProps: N): Array<A> => {\r\n\r\n    return items.map((u:any) => {\r\n        if (u[objPropName] === itemId){\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u\r\n    })\r\n}","import {Dispatch} from \"redux\";\r\nimport {ResponseType, usersAPI} from \"../api/api\";\r\nimport {updateObjectInArray} from \"../utils/objec-helpers\";\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET-USERS'\r\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'SET-TOTAL-USERS-COUNT'\r\nconst SET_FETCHING = 'SET-FETCHING'\r\nconst SET_FOLLOWING_IN_PROGRESS = 'SET-FOLLOWING-IN-PROGRESS'\r\n\r\n\r\nexport type PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type LocationType = {\r\n    country: string\r\n    city: string\r\n}\r\nexport type UserType = {\r\n    id: number\r\n    photos: PhotosType\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    location: LocationType\r\n}\r\nexport type UsersType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n}\r\ntype ActionsTypes =\r\n    ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unfollowSuccess>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof setFetching>\r\n    | ReturnType<typeof setFollowingInProgress>\r\n\r\ntype FollowUnfollowActionType = ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unfollowSuccess>\r\n\r\nlet initialState: UsersType = {\r\n    users: [],\r\n    pageSize: 15,\r\n    totalUsersCount: 0,\r\n    currentPage: 8,\r\n    isFetching: true,\r\n    followingInProgress: []\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): UsersType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n                //users: state.users.map(u => u.id === action.userId ? {...u, followed: true} : u)\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n                //users: state.users.map(u => u.id === action.userId ? {...u, followed: false} : u)\r\n            }\r\n        case SET_USERS:\r\n             return  {...state, users: [...action.users]}\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n        case SET_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n        case SET_FOLLOWING_IN_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(u => u !== action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userId: number) => {\r\n    return {\r\n        type: FOLLOW,\r\n        userId\r\n    } as const\r\n}\r\nexport const unfollowSuccess = (userId: number) => {\r\n    return {\r\n        type: UNFOLLOW,\r\n        userId\r\n    } as const\r\n}\r\nexport const setUsers = (users: Array<UserType>) => {\r\n    return {\r\n        type: SET_USERS,\r\n        users\r\n    } as const\r\n}\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE,\r\n        currentPage\r\n    } as const\r\n}\r\nexport const setTotalUsersCount = (totalUsersCount: number) => {\r\n    return {\r\n        type: SET_TOTAL_USERS_COUNT,\r\n        totalUsersCount\r\n    } as const\r\n}\r\nexport const setFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: SET_FETCHING,\r\n        isFetching\r\n    } as const\r\n}\r\nexport const setFollowingInProgress = (isFetching: boolean, userId: number) => {\r\n    return {\r\n        type: SET_FOLLOWING_IN_PROGRESS,\r\n        isFetching,\r\n        userId\r\n    } as const\r\n}\r\n\r\nexport const requestUsers = (page: number, pageSize: number) => async (dispatch: Dispatch) => {\r\n    dispatch(setFetching(true))\r\n    dispatch(setCurrentPage(page))\r\n    let data = await usersAPI.getUsers(page, pageSize)\r\n    dispatch(setFetching(false))\r\n    dispatch(setUsers(data.items))\r\n    dispatch(setTotalUsersCount(data.totalCount))\r\n}\r\n\r\nexport const followUnfollowFlow = async (\r\n    dispatch: Dispatch,\r\n    userId: number,\r\n    apiMethod: (userId: number) => Promise<ResponseType<{}>>,\r\n    actionCreator: (userId: number) => FollowUnfollowActionType) => {\r\n\r\n    dispatch(setFollowingInProgress(true, userId))\r\n    let data = await apiMethod(userId)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(setFollowingInProgress(false, userId))\r\n}\r\n\r\nexport const follow = (userId: number) => async (dispatch: Dispatch) => {\r\n    await followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess)\r\n}\r\nexport const unfollow = (userId: number) => async (dispatch: Dispatch) => {\r\n    await followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess)\r\n}\r\n\r\nexport default usersReducer"],"sourceRoot":""}