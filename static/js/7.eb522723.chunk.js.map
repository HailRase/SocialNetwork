{"version":3,"sources":["components/common/FormsControl/FormsControl.tsx","components/common/FormsControl/FormsControl.module.css","utils/validators/validators.ts","components/Login/Login.module.css","components/Login/Login.tsx"],"names":["FormControl","input","meta","touched","error","children","showError","className","s","formControl","errorMessage","FormsControl","restProps","textarea","Input","createField","placeholder","name","validators","component","props","text","style","display","validate","marginBottom","module","exports","required","value","undefined","maxLength","length","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","formElementsPosition","type","color","purple","connect","state","isAuth","auth","isFetching","login","to","loginContainer","loginElementsPosition","formName","formData","email","password","rememberMe"],"mappings":"0RAWMA,EAAwC,SAAC,GAIM,EAHFC,MAGG,IAAD,IAFFC,KAAOC,EAEL,EAFKA,QAASC,EAEd,EAFcA,MAChBC,EACE,EADFA,SAEzCC,EAAYH,GAAWC,EAE7B,OACI,sBAAKG,UAAWD,EAAS,UAAME,IAAEC,YAAR,YAAuBD,IAAEJ,OAAUI,IAAEC,YAA9D,UACKJ,EACAC,GAAa,sBAAMC,UAAWC,IAAEE,aAAnB,SAAkCN,QAI/CO,EAAsC,SAAC,GAIO,IAHHV,EAGE,EAHFA,MACAC,EAEE,EAFFA,KACGU,EACD,gCACtD,OACI,cAACZ,EAAD,CAAaC,MAAOA,EAAOC,KAAMA,EAAjC,SACI,kDAAUK,UAAWC,IAAEK,UAAcZ,GAAWW,OAK/CE,EAA4B,SAAC,GAIO,IAHHb,EAGE,EAHFA,MACAC,EAEE,EAFFA,KACGU,EACD,gCAC5C,OACI,cAACZ,EAAD,CAAaC,MAAOA,EAAOC,KAAMA,EAAjC,SACI,+CAAOK,UAAWC,IAAEP,OAAWA,GAAWW,OAKzCG,EAAc,SAAUC,EAAsBC,EAAeC,EAA2BC,EAAeC,EAAWC,GAApG,OACvB,sBAAKC,MAAO,CAACC,QAAS,QAAtB,UACI,cAAC,IAAD,yBAAON,KAAMA,EACNE,UAAWA,EACXK,SAAUN,EACVF,YAAaA,GACTI,GAJX,IAKIE,MAAO,CAACG,aAAc,WAE1B,8BACKJ,S,oBC1DbK,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,4BAA4B,aAAe,mCAAmC,SAAW,iC,iCCDnK,oEAAO,IAAMC,EAAW,SAACC,GAAD,OAAmBA,OAAQC,EAAY,wBAElDC,EAAY,SAACC,GAAD,OAAoB,SAACH,GAAD,OAAmBA,EAAMG,OAASA,EAAf,wBACzCA,EADyC,iBAE1DF,K,oBCHNJ,EAAOC,QAAU,CAAC,eAAiB,8BAA8B,sBAAwB,qCAAqC,qBAAuB,oCAAoC,SAAW,0B,iCCDpM,mGA2CMM,EAAiBC,YAAwB,CAACC,KAAM,SAA/BD,EAhBL,SAAC,GAA4D,IAA3DE,EAA0D,EAA1DA,aAAchC,EAA4C,EAA5CA,MAC9B,OACI,uBAAMiC,SAAUD,EAAc7B,UAAWC,IAAE8B,qBAA3C,UACKvB,YAAY,QAAS,QAAS,CAACa,KAAWd,KAC1CC,YAAY,WAAY,WAAY,CAACa,KAAWd,IAAO,CAACyB,KAAM,aAC9DxB,YAAY,GAAI,aAAc,GAAID,IAAO,CAACyB,KAAM,YAAa,eAE1DnC,GAAS,qBAAKkB,MAAO,CAACkB,MAAO,OAApB,SAA6BpC,IAE1C,8BACI,cAAC,IAAD,CAAcqC,QAAM,EAApB,2BAkCDC,uBA1BS,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,OACnBE,WAAYH,EAAME,KAAKC,cAuBS,CAACC,WAA1BL,EAnBD,SAACtB,GAIX,OAAIA,EAAMwB,OAAe,cAAC,IAAD,CAAUI,GAAI,aAEnC,qBAAKzC,UAAWC,IAAEyC,eAAlB,SACI,sBAAK1C,UAAWC,IAAE0C,sBAAlB,UACI,8BACI,oBAAI3C,UAAWC,IAAE2C,SAAjB,qBAEJ,8BACI,cAAClB,EAAD,CAAgBI,SAXR,SAACe,GACrBhC,EAAM2B,MAAMK,EAASC,MAAOD,EAASE,SAAUF,EAASG","file":"static/js/7.eb522723.chunk.js","sourcesContent":["import React, {DetailedHTMLProps, FC, InputHTMLAttributes, TextareaHTMLAttributes} from 'react';\r\nimport {WrappedFieldProps} from \"redux-form/lib/Field\";\r\nimport s from './FormsControl.module.css'\r\nimport {Field} from \"redux-form\";\r\nimport {required} from \"../../../utils/validators/validators\";\r\n\r\ntype DefaultTextAreaPropsType = DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\ntype TextareaPropsType = DefaultTextAreaPropsType & WrappedFieldProps\r\ntype InputPropsType = DefaultInputPropsType & WrappedFieldProps\r\ntype FormControlPropsType = InputPropsType & TextareaPropsType\r\nconst FormControl: FC<FormControlPropsType> = ({\r\n                                                   input,\r\n                                                   meta: {touched, error},\r\n                                                   children\r\n                                               }) => {\r\n    const showError = touched && error\r\n\r\n    return (\r\n        <div className={showError ? `${s.formControl} ${s.error}` : s.formControl}>\r\n            {children}\r\n            {showError && <span className={s.errorMessage}>{error}</span>}\r\n        </div>\r\n    );\r\n}\r\nexport const FormsControl: FC<TextareaPropsType> = ({\r\n                                                        input,\r\n                                                        meta,\r\n                                                        ...restProps\r\n                                                    }) => {\r\n    return (\r\n        <FormControl input={input} meta={meta}>\r\n            <textarea className={s.textarea} {...input} {...restProps}/>\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport const Input: FC<InputPropsType> = ({\r\n                                              input,\r\n                                              meta,\r\n                                              ...restProps\r\n                                          }) => {\r\n    return (\r\n        <FormControl input={input} meta={meta}>\r\n            <input className={s.input} {...input} {...restProps}/>\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport const createField = <T, C, P>(placeholder?: string, name?: string, validators?: T | Array<T>, component?: C, props?: P, text?: string) => (\r\n    <div style={{display: \"flex\"}}>\r\n        <Field name={name}\r\n               component={component}\r\n               validate={validators}\r\n               placeholder={placeholder}\r\n               {...props}\r\n            style={{marginBottom: \"10px\"}}\r\n        />\r\n        <div>\r\n            {text}\r\n        </div>\r\n    </div>\r\n)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__Bb7au\",\"error\":\"FormsControl_error__2MOuv\",\"errorMessage\":\"FormsControl_errorMessage__BRyAo\",\"textarea\":\"FormsControl_textarea__2njJO\"};","export const required = (value: string) => value ? undefined : 'Field is required!!!'\r\n\r\nexport const maxLength = (length: number) => (value: string) => value.length > length\r\n    ? `Max length is ${length} symbols`\r\n    : undefined","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginContainer\":\"Login_loginContainer__2kOmA\",\"loginElementsPosition\":\"Login_loginElementsPosition__1TC4S\",\"formElementsPosition\":\"Login_formElementsPosition__1QfVl\",\"formName\":\"Login_formName__1G1Xg\"};","import React from 'react';\r\nimport {InjectedFormProps, reduxForm} from 'redux-form';\r\nimport s from './Login.module.css';\r\nimport {connect} from \"react-redux\";\r\nimport {StoreType} from \"../../redux/redux-store\";\r\nimport {createField, Input} from \"../common/FormsControl/FormsControl\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport CustomButton from \"../common/CustomButton/CustomButton\";\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    error: string\r\n}\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    isFetching: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha?: boolean) => void\r\n}\r\n\r\ntype LoginPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst LoginForm = ({handleSubmit, error}: InjectedFormProps<FormDataType>) => {\r\n    return (\r\n        <form onSubmit={handleSubmit} className={s.formElementsPosition}>\r\n            {createField('Login', 'email', [required], Input)}\r\n            {createField('Password', 'password', [required], Input, {type: 'password'})}\r\n            {createField('', 'rememberMe', [], Input, {type: 'checkbox'}, 'remember me')}\r\n            {\r\n                error && <div style={{color: 'red'}}>{error}</div>\r\n            }\r\n            <div>\r\n                <CustomButton purple>Login</CustomButton>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\n\r\nconst mapStateToProps = (state: StoreType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        isFetching: state.auth.isFetching\r\n    }\r\n}\r\n\r\nconst Login = (props: LoginPropsType) => {\r\n    const onSubmitHandler = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n    if (props.isAuth) return <Redirect to={'/profile'}/>\r\n    return (\r\n        <div className={s.loginContainer}>\r\n            <div className={s.loginElementsPosition}>\r\n                <div>\r\n                    <h1 className={s.formName}>LOGIN</h1>\r\n                </div>\r\n                <div>\r\n                    <LoginReduxForm onSubmit={onSubmitHandler}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default connect(mapStateToProps, {login})(Login);"],"sourceRoot":""}