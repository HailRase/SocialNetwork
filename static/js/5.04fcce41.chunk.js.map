{"version":3,"sources":["components/common/FormsControl/FormsControl.tsx","components/common/FormsControl/FormsControl.module.css","utils/validators/validators.ts","hoc/withAuthRedirect.tsx","components/Dialogs/Dialogs.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["FormControl","input","meta","touched","error","children","showError","className","s","formControl","errorMessage","FormsControl","restProps","textarea","Input","createField","placeholder","name","validators","component","props","text","style","display","validate","marginBottom","module","exports","required","value","undefined","maxLength","length","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","to","Message","message","DialogItem","dialogsItem","textDecoration","id","maxLength50","reduxForm","form","onSubmit","handleSubmit","Field","backgroundColor","outline","color","Dialogs","dialogsElements","dialogPage","dialogs","map","d","messageElements","messages","m","dialogsItems","addMessage","newMessageText","compose","dispatch","addMessageAC"],"mappings":"0RAWMA,EAAwC,SAAC,GAIM,EAHFC,MAGG,IAAD,IAFFC,KAAOC,EAEL,EAFKA,QAASC,EAEd,EAFcA,MAChBC,EACE,EADFA,SAEzCC,EAAYH,GAAWC,EAE7B,OACI,sBAAKG,UAAWD,EAAS,UAAME,IAAEC,YAAR,YAAuBD,IAAEJ,OAAUI,IAAEC,YAA9D,UACKJ,EACAC,GAAa,sBAAMC,UAAWC,IAAEE,aAAnB,SAAkCN,QAI/CO,EAAsC,SAAC,GAIO,IAHHV,EAGE,EAHFA,MACAC,EAEE,EAFFA,KACGU,EACD,gCACtD,OACI,cAACZ,EAAD,CAAaC,MAAOA,EAAOC,KAAMA,EAAjC,SACI,kDAAUK,UAAWC,IAAEK,UAAcZ,GAAWW,OAK/CE,EAA4B,SAAC,GAIO,IAHHb,EAGE,EAHFA,MACAC,EAEE,EAFFA,KACGU,EACD,gCAC5C,OACI,cAACZ,EAAD,CAAaC,MAAOA,EAAOC,KAAMA,EAAjC,SACI,+CAAOK,UAAWC,IAAEP,OAAWA,GAAWW,OAKzCG,EAAc,SAAUC,EAAsBC,EAAeC,EAA2BC,EAAeC,EAAWC,GAApG,OACvB,sBAAKC,MAAO,CAACC,QAAS,QAAtB,UACI,cAAC,IAAD,yBAAON,KAAMA,EACNE,UAAWA,EACXK,SAAUN,EACVF,YAAaA,GACTI,GAJX,IAKIE,MAAO,CAACG,aAAc,WAE1B,8BACKJ,S,oBC1DbK,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,4BAA4B,aAAe,mCAAmC,SAAW,iC,iCCDnK,oEAAO,IAAMC,EAAW,SAACC,GAAD,OAAmBA,OAAQC,EAAY,wBAElDC,EAAY,SAACC,GAAD,OAAoB,SAACH,GAAD,OAAmBA,EAAMG,OAASA,EAAf,wBACzCA,EADyC,iBAE1DF,K,mHCMFG,EAAkB,SAACC,GAAD,MAA4C,CAC9DC,OAAQD,EAAME,KAAKD,SAGhB,SAASE,EAAoBC,GAOhC,OAAOC,YAAQN,EAARM,EANmB,SAACnB,GAAgC,IAClDe,EAAwBf,EAAxBe,OAAWvB,EADsC,YACzBQ,EADyB,YAEtD,OAAKe,EACE,cAACG,EAAD,eAAe1B,IADF,cAAC,IAAD,CAAU4B,GAAI,gB,oBChB1Cd,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,4B,oBCA9ID,EAAOC,QAAU,CAAC,QAAU,2B,oBCA5BD,EAAOC,QAAU,CAAC,YAAc,kC,sGCYjBc,MATf,SAAiBrB,GACb,OACI,qBAAKb,UAAWC,IAAEkC,QAAlB,SACI,+BAAQtB,EAAMC,U,0BCQXsB,MAVf,SAAoBvB,GAChB,OACI,qBAAKb,UAAWC,IAAEoC,YAAlB,SACI,cAAC,IAAD,CAAStB,MAAO,CAACuB,eAAgB,QAASL,GAAI,YAAcpB,EAAM0B,GAAlE,SAAuE1B,EAAMH,U,oCCAnF8B,EAAchB,YAAU,IAmBfiB,cAA8B,CAACC,KAAM,wBAArCD,EAlBQ,SAAC5B,GACpB,OACI,uBAAM8B,SAAU9B,EAAM+B,aAAtB,UACI,cAACC,EAAA,EAAD,CAAOjC,UAAWR,IACXa,SAAU,CAACI,IAAUmB,GACrB9B,KAAM,iBACND,YAAa,kBACZM,MAAO,CAAC+B,gBAAiB,UAAWC,QAAS,OAAQC,MAAO,aAEpE,8BACI,yDCiBDC,MA5Bf,SAAiBpC,GAEb,IAIIqC,EAAkBrC,EAAMsC,WAAWC,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAuB5C,KAAM4C,EAAE5C,KAAM6B,GAAIe,EAAEf,IAA1Be,EAAEf,OACvEgB,EAAkB1C,EAAMsC,WAAWK,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAoB3C,KAAM2C,EAAE3C,KAAMyB,GAAIkB,EAAElB,IAA1BkB,EAAElB,OAGzE,OACI,sBAAKvC,UAAWC,IAAEmD,QAAlB,UACI,qBAAKpD,UAAWC,IAAEyD,aAAlB,SACKR,IAEL,gCACI,qBAAKlD,UAAWC,IAAEuD,SAAlB,SACKD,IAEL,8BACI,cAAC,EAAD,CAAgBZ,SAlBL,SAACR,GACxBtB,EAAM8C,WAAWxB,EAAQyB,gBACzBzB,EAAQyB,eAAiB,e,yBCkBlBC,sBACX/B,IACAE,aAfoB,SAACL,GACrB,MAAO,CACHwB,WAAYxB,EAAMwB,eAGC,SAACW,GACxB,MAAO,CACHH,WAAY,SAACxB,GACT2B,EAASC,YAAa5B,SAKnB0B,CAGbZ","file":"static/js/5.04fcce41.chunk.js","sourcesContent":["import React, {DetailedHTMLProps, FC, InputHTMLAttributes, TextareaHTMLAttributes} from 'react';\r\nimport {WrappedFieldProps} from \"redux-form/lib/Field\";\r\nimport s from './FormsControl.module.css'\r\nimport {Field} from \"redux-form\";\r\nimport {required} from \"../../../utils/validators/validators\";\r\n\r\ntype DefaultTextAreaPropsType = DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\ntype TextareaPropsType = DefaultTextAreaPropsType & WrappedFieldProps\r\ntype InputPropsType = DefaultInputPropsType & WrappedFieldProps\r\ntype FormControlPropsType = InputPropsType & TextareaPropsType\r\nconst FormControl: FC<FormControlPropsType> = ({\r\n                                                   input,\r\n                                                   meta: {touched, error},\r\n                                                   children\r\n                                               }) => {\r\n    const showError = touched && error\r\n\r\n    return (\r\n        <div className={showError ? `${s.formControl} ${s.error}` : s.formControl}>\r\n            {children}\r\n            {showError && <span className={s.errorMessage}>{error}</span>}\r\n        </div>\r\n    );\r\n}\r\nexport const FormsControl: FC<TextareaPropsType> = ({\r\n                                                        input,\r\n                                                        meta,\r\n                                                        ...restProps\r\n                                                    }) => {\r\n    return (\r\n        <FormControl input={input} meta={meta}>\r\n            <textarea className={s.textarea} {...input} {...restProps}/>\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport const Input: FC<InputPropsType> = ({\r\n                                              input,\r\n                                              meta,\r\n                                              ...restProps\r\n                                          }) => {\r\n    return (\r\n        <FormControl input={input} meta={meta}>\r\n            <input className={s.input} {...input} {...restProps}/>\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport const createField = <T, C, P>(placeholder?: string, name?: string, validators?: T | Array<T>, component?: C, props?: P, text?: string) => (\r\n    <div style={{display: \"flex\"}}>\r\n        <Field name={name}\r\n               component={component}\r\n               validate={validators}\r\n               placeholder={placeholder}\r\n               {...props}\r\n            style={{marginBottom: \"10px\"}}\r\n        />\r\n        <div>\r\n            {text}\r\n        </div>\r\n    </div>\r\n)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__Bb7au\",\"error\":\"FormsControl_error__2MOuv\",\"errorMessage\":\"FormsControl_errorMessage__BRyAo\",\"textarea\":\"FormsControl_textarea__2njJO\"};","export const required = (value: string) => value ? undefined : 'Field is required!!!'\r\n\r\nexport const maxLength = (length: number) => (value: string) => value.length > length\r\n    ? `Max length is ${length} symbols`\r\n    : undefined","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {StoreType} from \"../redux/redux-store\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: StoreType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1NsbH\",\"dialogsItems\":\"Dialogs_dialogsItems__2X6Tx\",\"active\":\"Dialogs_active__2JLie\",\"messages\":\"Dialogs_messages__1iN7_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1L6c6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsItem\":\"DialogItem_dialogsItem__3dhiF\"};","import React from 'react';\r\nimport s from './Message.module.css';\r\nimport {MessageType} from \"../../../redux/store\";\r\n\r\nfunction Message(props: MessageType) {\r\n    return (\r\n        <div className={s.message}>\r\n            <span >{props.text}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './DialogItem.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogType} from \"../../../redux/store\";\r\n\r\nfunction DialogItem(props:DialogType) {\r\n    return (\r\n        <div className={s.dialogsItem}>\r\n            <NavLink style={{textDecoration: \"none\"}} to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {FormsControl} from \"../common/FormsControl/FormsControl\";\r\nimport {maxLength, required} from \"../../utils/validators/validators\";\r\n\r\nexport type AddMessageFormType = {\r\n    newMessageText: string\r\n}\r\nconst maxLength50 = maxLength(50)\r\nconst AddMessageForm = (props: InjectedFormProps<AddMessageFormType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={FormsControl}\r\n                   validate={[required, maxLength50]}\r\n                   name={\"newMessageText\"}\r\n                   placeholder={\"Enter your text\"}\r\n                    style={{backgroundColor: \"#a95dff\", outline: \"none\", color: '#ecdc45'}}\r\n            />\r\n            <div>\r\n                <button>\r\n                    Add message\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<AddMessageFormType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport AddMessageForm, {AddMessageFormType} from \"./AddMessageForm\";\r\n\r\n\r\nfunction Dialogs(props: DialogsPropsType) {\r\n\r\n    const onSubmitAddMessage = (message: AddMessageFormType) => {\r\n        props.addMessage(message.newMessageText)\r\n        message.newMessageText = ''\r\n    }\r\n    let dialogsElements = props.dialogPage.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>)\r\n    let messageElements = props.dialogPage.messages.map(m => <Message key={m.id} text={m.text} id={m.id}/>)\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div>\r\n                <div className={s.messages}>\r\n                    {messageElements}\r\n                </div>\r\n                <div>\r\n                    <AddMessageForm onSubmit={onSubmitAddMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {addMessageAC, IDialogPageType} from \"../../redux/dialog-reducer\"\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {StoreType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\ntype MapStateToPropsType = {\r\n    dialogPage: IDialogPageType\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addMessage: (message: string) => void\r\n}\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\nconst mapStateToProps = (state: StoreType): MapStateToPropsType => {\r\n    return {\r\n        dialogPage: state.dialogPage,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addMessage: (message) => {\r\n            dispatch(addMessageAC(message))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n)(Dialogs)\r\n\r\n"],"sourceRoot":""}