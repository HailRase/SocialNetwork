{"version":3,"sources":["components/common/FormsControl/FormsControl.tsx","components/common/FormsControl/FormsControl.module.css","utils/validators/validators.ts","hoc/withAuthRedirect.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","assets/images/user-man.png","components/common/Paginator/Paginator.tsx","components/common/Paginator/Paginator.module.css","components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/AddPostForm.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/Post/MyPostsContainer.tsx","components/Profile/profileFriends/ProfileFriends.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["FormControl","input","meta","touched","error","children","showError","className","s","formControl","errorMessage","FormsControl","restProps","textarea","Input","createField","placeholder","name","validators","component","props","text","style","display","validate","marginBottom","module","exports","required","value","undefined","maxLength","length","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","to","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","_s","_i","next","done","push","err","unsupportedIterableToArray","TypeError","Paginator","pageSize","currentPage","onPageChanged","totalItemsCount","portionSize","pagesCount","Math","ceil","pagesArray","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","useEffect","mainPaginator","arrow","onClick","filter","p","map","paginatorItem","ProfileStatusWithHooks","status","setStatus","editMode","setEditMode","autoFocus","onChange","e","currentTarget","onBlur","updateStatus","type","onDoubleClick","ProfileInfo","userProfile","descriptionBlog","profileImage","alt","src","photos","large","photo","avatar","profileInformation","fullName","lookingForAJob","lookingForAJobDescription","Preloader","Post","postContainer","message","likeCount","maxLength15","reduxForm","form","addPostFormContainer","onSubmit","handleSubmit","Field","label","width","CustomButton","buttonPosition","purple","MyPosts","React","memo","postsElement","profilePage","posts","likesCount","id","postsBlock","nameContainer","postText","addPost","newPostText","MyPostsContainer","dispatch","ProfileFriends","friends","useSelector","usersPage","users","page","useDispatch","requestUsers","pageNumber","u","followed","height","small","Profile","profileContainer","profileInfoContainer","profilePageServices","friendsPage","ProfileContainer","userId","this","match","params","authorizedUserId","history","getUserProfile","getStatus","getProfile","prevProps","compose","data","withRouter"],"mappings":"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","file":"static/js/4.0fa52cac.chunk.js","sourcesContent":["import React, {DetailedHTMLProps, FC, InputHTMLAttributes, TextareaHTMLAttributes} from 'react';\r\nimport {WrappedFieldProps} from \"redux-form/lib/Field\";\r\nimport s from './FormsControl.module.css'\r\nimport {Field} from \"redux-form\";\r\nimport {required} from \"../../../utils/validators/validators\";\r\n\r\ntype DefaultTextAreaPropsType = DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\ntype TextareaPropsType = DefaultTextAreaPropsType & WrappedFieldProps\r\ntype InputPropsType = DefaultInputPropsType & WrappedFieldProps\r\ntype FormControlPropsType = InputPropsType & TextareaPropsType\r\nconst FormControl: FC<FormControlPropsType> = ({\r\n                                                   input,\r\n                                                   meta: {touched, error},\r\n                                                   children\r\n                                               }) => {\r\n    const showError = touched && error\r\n\r\n    return (\r\n        <div className={showError ? `${s.formControl} ${s.error}` : s.formControl}>\r\n            {children}\r\n            {showError && <span className={s.errorMessage}>{error}</span>}\r\n        </div>\r\n    );\r\n}\r\nexport const FormsControl: FC<TextareaPropsType> = ({\r\n                                                        input,\r\n                                                        meta,\r\n                                                        ...restProps\r\n                                                    }) => {\r\n    return (\r\n        <FormControl input={input} meta={meta}>\r\n            <textarea className={s.textarea} {...input} {...restProps}/>\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport const Input: FC<InputPropsType> = ({\r\n                                              input,\r\n                                              meta,\r\n                                              ...restProps\r\n                                          }) => {\r\n    return (\r\n        <FormControl input={input} meta={meta}>\r\n            <input className={s.input} {...input} {...restProps}/>\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport const createField = <T, C, P>(placeholder?: string, name?: string, validators?: T | Array<T>, component?: C, props?: P, text?: string) => (\r\n    <div style={{display: \"flex\"}}>\r\n        <Field name={name}\r\n               component={component}\r\n               validate={validators}\r\n               placeholder={placeholder}\r\n               {...props}\r\n            style={{marginBottom: \"10px\"}}\r\n        />\r\n        <div>\r\n            {text}\r\n        </div>\r\n    </div>\r\n)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__Bb7au\",\"error\":\"FormsControl_error__2MOuv\",\"errorMessage\":\"FormsControl_errorMessage__BRyAo\",\"textarea\":\"FormsControl_textarea__2njJO\"};","export const required = (value: string) => value ? undefined : 'Field is required!!!'\r\n\r\nexport const maxLength = (length: number) => (value: string) => value.length > length\r\n    ? `Max length is ${length} symbols`\r\n    : undefined","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {StoreType} from \"../redux/redux-store\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: StoreType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n};\r\n\r\n","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default __webpack_public_path__ + \"static/media/user-man.88012ad7.png\";","import React, {useEffect, useState} from \"react\";\r\nimport s from './Paginator.module.css'\r\n\r\n\r\ntype PaginatorPropsType = {\r\n    pageSize: number\r\n    totalItemsCount: number\r\n    currentPage: number\r\n    onPageChanged: (p: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nexport const Paginator: React.FC<PaginatorPropsType> = ({\r\n                                                            pageSize,\r\n                                                            currentPage,\r\n                                                            onPageChanged,\r\n                                                            totalItemsCount,\r\n                                                            portionSize = 10\r\n                                                        }) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n    let pagesArray = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pagesArray.push(i)\r\n    }\r\n    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    const [portionNumber, setPortionNumber] = useState<number>(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * portionSize\r\n    useEffect(() => {\r\n        setPortionNumber(Math.ceil(currentPage / portionSize))\r\n    }, [currentPage])\r\n\r\n    return (\r\n        <div className={s.mainPaginator}>\r\n            {portionNumber > 2 &&\r\n                <button className={s.arrow} onClick={()=> setPortionNumber(1)}>{\"<<\"}</button>}\r\n            {portionNumber > 1 &&\r\n                <button className={s.arrow} onClick={()=> setPortionNumber(portionNumber - 1)}>{\"<\"}</button>}\r\n            {pagesArray\r\n                .filter(p => p >= leftPortionPageNumber && p<= rightPortionPageNumber)\r\n                .map( p => {\r\n                    return <span className={s.paginatorItem} onClick={() => onPageChanged(p)}>{p} </span>\r\n                })}\r\n\r\n            {portionCount > portionNumber &&\r\n                <button className={s.arrow} onClick={ () => setPortionNumber(portionNumber + 1)}>{\">\"}</button>}\r\n            {(portionCount - portionNumber) > 2 &&\r\n                <button className={s.arrow} onClick={ () => setPortionNumber(portionCount)}>{\">>\"}</button>}\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainPaginator\":\"Paginator_mainPaginator__2WtZJ\",\"paginatorItem\":\"Paginator_paginatorItem__3NRek\",\"arrow\":\"Paginator_arrow__1Zkf_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileContainer\":\"Profile_profileContainer__3sSvd\",\"profileInfoContainer\":\"Profile_profileInfoContainer__2NyAN\",\"profilePage\":\"Profile_profilePage__2WNHV\",\"profilePageServices\":\"Profile_profilePageServices__2gkkr\",\"friendsPage\":\"Profile_friendsPage__2GF0P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlog\":\"ProfileInfo_descriptionBlog__3EJWo\",\"profileImage\":\"ProfileInfo_profileImage__Tbbxh\",\"profileInformation\":\"ProfileInfo_profileInformation__sbWCl\",\"avatar\":\"ProfileInfo_avatar__lqV8S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1eYTx\",\"nameContainer\":\"MyPosts_nameContainer__16vyO\",\"posts\":\"MyPosts_posts__2KqxB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postContainer\":\"Post_postContainer__uWPh-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addPostFormContainer\":\"AddPostForm_addPostFormContainer__1rqe6\",\"buttonPosition\":\"AddPostForm_buttonPosition__O3QWY\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n    const [status, setStatus] = useState(props.status)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const onDoubleClickSetEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const onBlurSetEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {editMode\r\n                ? <div>\r\n                    <input autoFocus\r\n                           onChange={onChangeStatus}\r\n                           onBlur={onBlurSetEditMode}\r\n                           value={status}\r\n                           type=\"text\"/>\r\n                </div>\r\n                : <div>\r\n                    <span onDoubleClick={onDoubleClickSetEditMode}>{props.status || '-------------'} </span>\r\n                </div>}\r\n        </>)\r\n\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {UserProfileType} from \"../../../redux/profile-reducer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport photo from '../../../assets/images/user-man.png'\r\n\r\ntype ProfileInfoPropsType = {\r\n    userProfile: UserProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = ({\r\n                                                         userProfile,\r\n                                                         status,\r\n                                                         updateStatus\r\n                                                     }) => {\r\n    if (!userProfile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={s.descriptionBlog}>\r\n            <div className={s.profileImage}>\r\n                <img alt={'Avatar'} src={userProfile.photos.large || photo} className={s.avatar}/>\r\n            </div>\r\n            <div className={s.profileInformation}>\r\n                <span>{userProfile.fullName}</span>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                <span>{userProfile.lookingForAJob}</span>\r\n                <span>{userProfile.lookingForAJobDescription}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\nfunction Post(props: PostPropsType) {\r\n    return (\r\n        <div className={s.postContainer}>\r\n            <img src=\"https://www.kinonews.ru/insimgs/2018/newsimg/newsimg83415.jpg\" alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like {props.likeCount}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLength, required} from \"../../../utils/validators/validators\";\r\nimport {FormsControl} from \"../../common/FormsControl/FormsControl\";\r\nimport CustomButton from \"../../common/CustomButton/CustomButton\";\r\nimport s from './AddPostForm.module.css'\r\n\r\nexport type AddPostFormType = {\r\n    newPostText: string\r\n}\r\nconst maxLength15 = maxLength(15)\r\nconst AddPostForm = (props: InjectedFormProps<AddPostFormType>) => {\r\n    return (\r\n        <form className={s.addPostFormContainer} onSubmit={props.handleSubmit}>\r\n            <Field component={FormsControl}\r\n                   label={'Create new post'}\r\n                   name={'newPostText'}\r\n                   placeholder={'Enter post text..'}\r\n                   validate={[required, maxLength15]}\r\n                   style={{width: \"100%\"}}\r\n            />\r\n            <CustomButton className={s.buttonPosition} purple>Add post</CustomButton>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default reduxForm<AddPostFormType>({form: 'profileAddPostForm'})(AddPostForm);","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostsPropsType} from \"./Post/MyPostsContainer\";\r\nimport AddPostForm, {AddPostFormType} from \"./AddPostForm\";\r\n\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n\r\n    let postsElement = props.profilePage.posts.map(p => <Post key={p.id} message={p.text} likeCount={p.likesCount}/>)\r\n\r\n    const onSubmitAddPost = (postText: AddPostFormType) => {\r\n        props.addPost(postText.newPostText)\r\n        postText.newPostText = ''\r\n    }\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <div className={s.nameContainer}>\r\n                <span>My posts</span>\r\n            </div>\r\n            <div>\r\n                <AddPostForm onSubmit={onSubmitAddPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport MyPosts from \"../MyPosts\";\r\nimport {addPost, ProfilePageType} from \"../../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {StoreType} from \"../../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    profilePage: ProfilePageType\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addPost: (postText: string) => void\r\n}\r\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: StoreType): MapStateToPropsType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (postText) => {\r\n            dispatch(addPost(postText))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {StoreType} from \"../../../redux/redux-store\";\r\nimport {requestUsers, UserType} from \"../../../redux/users-reducer\";\r\nimport {Paginator} from '../../common/Paginator/Paginator';\r\n\r\nconst ProfileFriends = () => {\r\n    debugger\r\n    const friends = useSelector<StoreType, UserType[]>(state => state.usersPage.users)\r\n    const page = useSelector<StoreType, number>(state => state.usersPage.currentPage)\r\n    const pageSize = useSelector<StoreType, number>(state => state.usersPage.pageSize)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        debugger\r\n        dispatch(requestUsers(page,pageSize, true))\r\n    }, [])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n            dispatch(requestUsers(pageNumber, pageSize))\r\n        }\r\n\r\n    return (\r\n        <div>\r\n            <Paginator pageSize={pageSize} currentPage={page} totalItemsCount={friends.length} onPageChanged={onPageChanged}/>\r\n            {friends.filter(u => u.followed).map(u => (\r\n                <div key={u.id} style={{width: \"30px\", height: \"30px\"}}>\r\n                    <div>{u.photos.small}</div>\r\n                    <div>{u.name}</div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileFriends;","import React from 'react';\r\nimport s from './Profile.module.css'\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/Post/MyPostsContainer\";\r\nimport {UserProfileType} from \"../../redux/profile-reducer\";\r\nimport ProfileFriends from './profileFriends/ProfileFriends';\r\n\r\ntype ProfilePropsType = {\r\n    userProfile: UserProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nfunction Profile(props: ProfilePropsType) {\r\n\r\n\r\n\r\n    return (\r\n        <div className={s.profileContainer}>\r\n            <div className={s.profilePage}>\r\n                <div className={s.profileInfoContainer}>\r\n                    <ProfileInfo userProfile={props.userProfile}\r\n                                 status={props.status}\r\n                                 updateStatus={props.updateStatus}/>\r\n                </div>\r\n                <div className={s.profilePageServices}>\r\n                    <div className={s.friendsPage}>\r\n                        <div>Friends</div>\r\n                        <ProfileFriends/>\r\n                    </div>\r\n                    <MyPostsContainer/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {StoreType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, updateStatus, UserProfileType} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    userProfile: UserProfileType | null\r\n    status: string\r\n    authorizedUserId: number | undefined\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n}\r\ntype ParamsPropsType = {\r\n    userId: string\r\n}\r\nexport type ProfileContainerPropsType =\r\n    MapStateToPropsType\r\n    & MapDispatchToPropsType\r\n    & RouteComponentProps<ParamsPropsType>\r\n\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n    getProfile(){\r\n        let userId = this.props.match.params.userId\r\n        if (!userId ) {\r\n            userId = this.props.authorizedUserId + ''\r\n            if(!userId){\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(+userId)\r\n        this.props.getStatus(+userId)\r\n    }\r\n    componentDidMount() {\r\n        this.getProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ProfileContainerPropsType) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId){\r\n            this.getProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile userProfile={this.props.userProfile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: StoreType): MapStateToPropsType => {\r\n    return {\r\n        userProfile: state.profilePage.userProfile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.data?.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}